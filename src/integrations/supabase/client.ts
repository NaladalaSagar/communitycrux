
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://faczmoxxcfysawyzjsau.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZhY3ptb3h4Y2Z5c2F3eXpqc2F1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NzY1MTQsImV4cCI6MjA2MjM1MjUxNH0.Z3ipih14wqsk5QlVtQ8vvvIObI4TCeDALlPT9SmJG0E";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define a generic Database type that Supabase will use
type Tables = {
  profiles: {
    Row: {
      id: string;
      username: string | null;
      avatar_url: string | null;
      bio: string | null;
      created_at: string;
    };
    Insert: {
      id: string;
      username?: string | null;
      avatar_url?: string | null;
      bio?: string | null;
      created_at?: string;
    };
    Update: {
      id?: string;
      username?: string | null;
      avatar_url?: string | null;
      bio?: string | null;
      created_at?: string;
    };
  };
  threads: {
    Row: {
      id: string;
      title: string;
      content: string;
      author_id: string;
      category_id: string;
      created_at: string;
      updated_at: string;
      is_pinned: boolean;
      tags: string[] | null;
    };
    Insert: {
      id?: string;
      title: string;
      content: string;
      author_id: string;
      category_id: string;
      created_at?: string;
      updated_at?: string;
      is_pinned?: boolean;
      tags?: string[] | null;
    };
    Update: {
      id?: string;
      title?: string;
      content?: string;
      author_id?: string;
      category_id?: string;
      created_at?: string;
      updated_at?: string;
      is_pinned?: boolean;
      tags?: string[] | null;
    };
  };
  comments: {
    Row: {
      id: string;
      content: string;
      thread_id: string;
      author_id: string;
      parent_id: string | null;
      is_answer: boolean;
      created_at: string;
      updated_at: string;
    };
    Insert: {
      id?: string;
      content: string;
      thread_id: string;
      author_id: string;
      parent_id?: string | null;
      is_answer?: boolean;
      created_at?: string;
      updated_at?: string;
    };
    Update: {
      id?: string;
      content?: string;
      thread_id?: string;
      author_id?: string;
      parent_id?: string | null;
      is_answer?: boolean;
      created_at?: string;
      updated_at?: string;
    };
  };
  votes: {
    Row: {
      id: string;
      user_id: string;
      entity_id: string;
      entity_type: string;
      vote_type: string;
      created_at: string;
    };
    Insert: {
      id?: string;
      user_id: string;
      entity_id: string;
      entity_type: string;
      vote_type: string;
      created_at?: string;
    };
    Update: {
      id?: string;
      user_id?: string;
      entity_id?: string;
      entity_type?: string;
      vote_type?: string;
      created_at?: string;
    };
  };
};

type Database = {
  public: {
    Tables: Tables;
    Views: {};
    Functions: {
      get_vote_count: {
        Args: { entity_id: string; entity_type: string };
        Returns: { upvotes: number; downvotes: number };
      };
      get_comment_count: {
        Args: { thread_id: string };
        Returns: number;
      };
    };
    Enums: {};
  };
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
